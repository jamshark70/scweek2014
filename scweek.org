# Planning for SC week-long workshop

* Technical
** TODO Distributing extensions [0/5]
   - [ ] JIT extensions
   - [ ] ddwlib
   - [ ] crucial
   - [ ] psSet
   - [ ] Write slides about this
** Patterns + ProxySpace
*** Notes for documentation
**** NodeProxy play/stop semantics
     - If the NP exists, its source is processing, always.
     - 'play' only allows it to be heard.
     - 'stop' only suppresses the output.
     - A \psSet pattern source behaves the same:
       - It always produces events with its normal timing.
       - 'stop' turns all the events into rests.
*** Syntax to address nodeproxy controls
    - 'key.argname'?
    - I think maybe even better to share control names across proxies
      Dictionary: argname -> Set of NodeProxies with that argname
*** DONE Move psSet support into a proper file
*** TODO Support multiple NP objects in psSet
*** TODO Move ProxySpace:setEvent into a proper file
** Numbers in ProxySpace: DC or control?
*** DONE Changing number doesn't update proxy's source
*** INPROG Switching back to numberproxy uses old value in set of args
** Org/LaTeX
*** DONE Page breaks before parts
*** DONE Left/right margins and header
*** DONE Center section headings in text
*** TODO Email bug: Failed export left temp buffer behind
Error recovery issue in org-babel-exp

I wanted to ask if this issue had been reported (or better, fixed). I'm on org 8.2.4, not sure if the behavior is better in a later version.

Earlier today, I had written a source code block and accidentally left out the language. When exporting, I got the stack trace pasted below. (I truncated several earlier stack frames, because the objects representing the content of the org source are rather large and repetitive.)

The nasty thing is that the error prevents org-export from cleaning up the temporary buffer. So then I had the confusing situation where my original org file showed no modifications, but when I asked emacs to save all modified buffers, it prompted me to save this "unchanged" file -- twice! So I foolishly hit "y" (twice), thinking this would clear the problem status... actually, it overwrote my original file on disk with babel-processed version.

Fortunately, I could recover it from the .org~ backup file. But that was a bit of a scare.

I think it's reasonable to expect

Debugger entered--Lisp error: (wrong-type-argument stringp nil)
  intern(nil)
  (assq (intern lang) org-latex-listings-langs)
  (cadr (assq (intern lang) org-latex-listings-langs))
  (or (cadr (assq ... org-latex-listings-langs)) lang)
  (let ((lst-lang ...) (caption-str ...)) (concat (format "\\lstset{%s}\n" ...) (format "\\begin{lstlisting}\n%s\\end{lstlisting}" ...)))
  (cond ((not org-latex-listings) (let* ... ...)) (custom-env (format "\\begin{%s}\n%s\\end{%s}\n" custom-env ... custom-env)) ((eq org-latex-listings ...) (let* ... ...)) (t (let ... ...)))
  (let* ((lang ...) (caption ...) (label ...) (custom-env ...) (num-start ...) (retain-labels ...) (attributes ...) (float ...)) (cond (... ...) (custom-env ...) (... ...) (t ...)))
  (progn (let* (... ... ... ... ... ... ... ...) (cond ... ... ... ...)))
  (if (org-string-nw-p (org-element-property :value src-block)) (progn (let* ... ...)))
  (when (org-string-nw-p (org-element-property :value src-block)) (let* (... ... ... ... ... ... ... ...) (cond ... ... ... ...)))
  org-latex-src-block((src-block (:language nil :switches nil :parameters nil :begin 211858 :end 212288 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :hiddenp nil :value "p.clear;  // or p = ProxySpace.new; p.push;\n\n(\n~grains.addSpec(\\tfreq, [1, 20, \\exp]);\n~grains.addSpec(\\pos, [0, b.duration]);\n~grains = { |tfreq = 5, graindur = 0.2, pan = 0, pos = 0.5,\n   amp = 0.2|\n   var trig = Impulse.ar(tfreq);\n   GrainBuf.ar(2, trig, graindur, b, 1, pos, 2, pan) * amp;\n};\n~grains.play;\n)\n\np.gui;  // if it's not already open\n" :post-blank 0 :post-affiliated 211916 :name "grain1" :caption (...) :parent (section ... ... #0))) nil (:export-options nil :input-file "/home/dlm/Documents/conferences/scweek2013/shows/02-synth/02-slideshow.org" :title ("SuperCollider Week, Day 2 \\\\ Sequencing with Patterns, Synthesis Techniques") :beamer-theme "default" :headline-levels 3 :latex-class "beamer" :latex-hyperref-p t :date ((latex-fragment ...)) :author ("H. James Harkins") :creator "Emacs 23.3.1 (Org mode 8.2.5f)" :email "" :exclude-tags ("noexport") :language "en" :preserve-breaks nil :section-numbers t :select-tags ("export") :time-stamp-file t :with-archived-trees headline :with-author t :with-clocks nil :with-creator comment :with-date t :with-drawers nil :with-email nil :with-emphasize t ...))
*** DONE [#A] Relative paths to graphics
*** DONE [#A] Section numbering in full article
*** DONE [#C] Reference to frame ID "undefined"
*** POSTPONED Filter to remove non-frame text
*** TODO [#C] Listings numbering problem with onlyenv
*** DONE Extract code examples					    :getcode:
#+begin_src emacs-lisp :exports none
(defun hjh-get-string-from-nested-thing (thing)
  "Peel off 'car's from a nested list until the car is a string."
  (while (and thing (not (stringp thing)))
    (setq thing (car thing)))
  thing
)

(defun hjh-src-blocks-to-string (counter get-some)
  "Iterate src blocks from org-element and add them to a string."
  (interactive "nStarting listing number: \nP")
  (when (not counter) (setq counter 1))
  (let ((tree (org-element-parse-buffer))
	(string "")
	(get-all (not get-some)))
    (org-element-map tree 'src-block
      (lambda (element)
	(setq element (car (cdr element)))
	(let ((caption (hjh-get-string-from-nested-thing (plist-get element :caption)))
	      (source (hjh-get-string-from-nested-thing (plist-get element :value))))
	  (when caption
	    (when (or get-all 
		      (let ((parms
			     (hjh-get-string-from-nested-thing (plist-get element :parameters))))
			(and (stringp parms) (string-match-p "extract" parms))))
	      (setq string (concat string (format "/**************
 Listing %d. %s
 **************/

%s\n\n"
					  counter
					  (substring-no-properties caption)
					  (substring-no-properties source)))))
	    ; always increment if there was a caption
	    (setq counter (1+ counter))))))
    string))

(defun hjh-src-blocks-to-buffer (counter get-some)
  "Put all the captioned source blocks from a buffer into another buffer."
  (interactive "nStarting listing number: \nP")
  (let* ((contents (hjh-src-blocks-to-string counter get-some))
	 (bufpath (buffer-file-name))
	 (newname (concat (file-name-sans-extension bufpath) ".scd"))
	 (bufname (file-name-nondirectory newname))
	 (newbuf (get-buffer-create bufname)))
    (with-current-buffer newbuf
      (erase-buffer)
      (insert contents)
      (set-visited-file-name newname))
    (switch-to-buffer-other-window newbuf)))
#+end_src

#+RESULTS:
: hjh-src-blocks-to-buffer

*** DONE Index entries
*** DONE Glossary
*** DONE Why do subsections become frames in beamerarticle?
*** POSTPONED Detecting beamer vs. article document class
Actually, I was wrong. `:latex-class' will contain the name given by the
user to its Beamer configuration. It may be totally unrelated to
"beamer".

You need to use a regexp to find out what class is used:

  (let ((beamer-class-p
         (and (stringp header)
              (org-string-match-p
               "^[ \t]*\\\\documentclass\\(?:\\[.*\\]\\)?{beamer}[ \t]*$"
               (nth 1 (assoc (plist-get info :latex-class) org-latex-classes)))))))

> +       (if (string= (plist-get info :latex-class) "beamer")
> +        (format "\\begin{frame}%s\\end{frame}" titlecmd)
> +      titlecmd))

You need to check if TITLECMD is nil before wrapping it within a frame.
Ideally before defining BEAMER-CLASS-P.

* Content
** TODO Exercises
** TODO Notes on play/stop? (Finish later, move to day one)
*** What's actually going on with \mth{play}/\mth{stop} in \clss{ProxySpace}?
In \clss{ProxySpace}, assigning a function or pattern to a \ci{\textasciitilde name} creates a \clss{NodeProxy}. The proxy is always running. If it's a function, the server is running the UGens; if a pattern, the language is generating events and playing them.

For both, the signal

* High-level outline
** *Notes* (not a topic)
   - Sequencing... where?
   - Give some exercises (time when I don't have to talk so much!)
** History
   - Music n
   - Common LISP music
   - SuperCollider
** SC architecture, environment
   - 3 apps
   - Navigating the IDE
     - Docklets
     - Server control
     - Code window
       - Auto-indent
       - Auto-completion
       - Code blocks in ()
** Beginning synthesis
   - Writing UGens into functions
     - Look under the hood
   - UGen: in --> black box --> out
     - Input and output rates
     - Input and output ranges
     - Predicting results of operations
       - Amplitude modulation, e.g.
   - ProxySpace
     - What's a proxy?
     - /Expose/ inputs -- if exposed, you can manipulate them
     - Amp envelope
       - Set source to trigger
       - Trigger inputs
     - Freq envelope, sharing trigger
     - Can model any synthesis technique
       Components: Oscillators, filters, modulators, envelopes
** Additive synthesis?
** Subtractive synthesis
   - Simplest
     - Oscillator rich in harmonics
	 - Typical waveforms
     - Filter(s)
	 - Typical filter types
	 - Resonance
   - Refine
     - Detuned oscillators
     - Modulation of filter parameters
	 - Envelope for attack; separate triggers for legato
     - LFO modulators
   - Note on efficiency?
** Modal synthesis
   - High resonance, short input sound: ringing
   - Filter's /impulse response/
   - Klank, DynKlank
     Also note /parallel/ vs /serial/ processing
   - Parameters:
     - Ringing frequencies (harmonic or inharmonic relationships)
     - Ring times (inverse correlation with bandwidth)
     - Amplitudes of each filter
     - Input spectrum and envelope
   - Related
     - Formant synthesis (Formlet)
     - Banded waveguides (feedback delays)
** Developing synths
   - Interactive, experimental process
   - Begin with a simple idea.
   - What's it missing?
   - Add a module to help with that.
   - Repeat.
   - One simple idea, boring. Many simple ideas together, exciting.
   - Pick a technique that interests you. Focus on it for the rest of the workshop.

** Group composition
   - Composition: Unity and contrast.
     - Unity: Collectively decide what will hold the piece together.
       - Harmony (tonality)?
       - Rhythm (tempo, meter)?
       - Tone color? (Many sounds derived from the same source material?)
     - Contrast: Balance of components
       - If something is rhythmic, what will be sustained?
       - High vs. low
       - Short vs. long
       - Smooth vs. jagged or angular
     - Decide on musical components
     - Start making them!

** Live control
   - Buttons and faders
   - Receiving
   - Central hub
   - Turning faders into buttons
     - Thresholds
 
* Glossary decisions [0/14]
  - [ ] range
  - [ ] Nyquist
  - [ ] interpolation [0/3]
    - [ ] linear
    - [ ] cubic
    - [ ] quadratic
  - [ ] absdif
  - [ ] trunc
  - [ ] roundUp
  - [ ] abs
  - [ ] sign
  - [ ] squared
  - [ ] sqrt
  - [ ] exp
  - [ ] log
  - [ ] sin
  - [ ] cos
* Overview (MD export)
  :PROPERTIES:
  :EXPORT_TITLE: Synthesis and Performance with SuperCollider
  :EXPORT_AUTHOR: H. James Harkins
  :EXPORT_FILE_NAME: scweek_overview.md
  :EXPORT_OPTIONS: toc:nil ^:nil ':nil
  :END:

** About the course
This intensive five-day workshop teaches you the fundamentals of sound
synthesis in the SuperCollider programming language, with an emphasis
on modular design, real-time patching and control devices for live
performance.

** About the instructor
H. James Harkins (Ph.D., Duke University) has 11 years experience
composing and performing with SuperCollider, and actively contributes
code and documentation to the SuperCollider project. He is the
developer of dewdrop_lib, an extension library including components
for mixing, MIDI control and high-level organization for larger
projects. He is currently an Associate Professor in the Modern Music
Department of Xinghai Conservatory of Music in Guangzhou, PRC,
teaching electronic music production and film music.

** What is SuperCollider?
SuperCollider is a programming language for audio synthesis and
algorithmic composition, designed by James McCartney. The current
incarnation, SuperCollider Server, is the third major version and was
released as an open-source project in 2002. It is currently maintained
by an international group of musicians and programmers. It is an
object-oriented language based loosely on SmallTalk, providing Unit
Generator objects for synthesis, powerful data structures, and Pattern
objects for sequences of musical information.

** What will be taught?
The workshop will culminate with a performance of a group
composition. Each student will be responsible for one or two textural
layers, to be controlled using mobile devices. The primary focus of
each session is practical information to complete the musical work.

Early sessions will build synthesizers from simple pieces of code,
where each code snippet represents typical synthesizer components
(oscillators, envelope generators, control signals). We will approach
basic synthesis techniques by experimentation. We will learn to
control these synthesizers using sequencing (patterns) and external
devices. The discussion of external devices will cover simple
graphical interfaces, and good programming habits to manage incoming
control information. Concluding sessions will touch on best practices
to build larger projects.

Sessions will be taught in both English and Chinese.

** Are there any prerequisites?
This workshop assumes no prior knowledge of SuperCollider. Familiarity
with electronic music technology will be helpful, but not required.

** What do I need to bring?
*** Laptop
Participants will need to bring their own laptop (Mac OSX, Linux or
Windows 7/8), and a headset for listening.

*** SuperCollider installation
Please install SuperCollider before attending the workshop:
http://supercollider.sourceforge.net/downloads/.

   - Mac: Please use SC 3.6.6. OSX 10.6 or higher is recommended.
   - Windows: Please use SC 3.6.6.
   - Linux: Pre-compiled packages for SC 3.6.3 exist for Debian/Ubuntu
     and Red Hat. Hoping for this to be updated before the workshop.

*** External control (smartphone/tablet, MIDI)
A mobile device with an OSC control app is recommended for the
performance sessions.

   - Android: /TouchOSC/ https://play.google.com/store/apps/details?id=net.hexler.touchosc&hl=en
   - iOS
     - *$4.99* - /TouchOSC/ https://itunes.apple.com/us/app/touchosc/id288120394?mt=8
     - Free - /mrmr/ https://itunes.apple.com/us/app/mrmr-osc-controller/id294296343

If you don't have a smartphone or tablet, a simple MIDI controller
such as a NanoKontrol would suffice.

** Day-by-Day Schedule:

10:00 - 12:00 Morning Session
12:00 - 13:00 Lunch
13:00 - 16:00 Afternoon Session (with 15 minute break)
16:30 - 18:00 Private Lesson

