* Glossary							   :noexport:
#+name: gloss01
| Term     | Description |
|----------+-------------|
| Function | a           |
| Variable | b           |
| Class    | c           |
| Method   | d           |
| Argument | e           |

* Classes 							   :noexport:
#+name: class01
| Term       | Description                                                              |
|------------+--------------------------------------------------------------------------|
| ProxySpace | An environment that automatically makes a NodeProxy from any item in it  |
| NodeProxy  | A hot-swappable placeholder for a Synth on the server                    |
| Synth      | Represents a synthesis node on the server                                |

* Methods							   :noexport:
#+name: mth01
| Term | Description |
|------+-------------|
|      |             |

* UGens								   :noexport:
#+name: ugens01
| Type | Term     | Description                                                    | Arguments           |
|------+----------+----------------------------------------------------------------+---------------------|
| Osc  | SinOsc   | Sinewave oscillator                                            | freq, phase         |
| Osc  | VarSaw   | Sawtooth oscillator with variable duty cycle. Not band-limited | freq, iphase, width |
| Osc  | LFNoise1 | Random number generator, linear interpolation                  | freq                |
| Osc  | Saw      | Band-limited sawtooth oscillator                               | freq                |
| Filt | LPF      | Butterworth lowpass filter                                     | in, freq            |
| Osc  | LFSaw    | Non-band-limited sawtooth oscillator                           | freq, iphase        |
| Osc  | Pulse    | Band-limited pulse wave oscillator                             | freq, width         |
| Filt | HPF      | Butterworth highpass filter                                    | in, freq            |
| Filt | BPF      | Bandpass filter                                                | in, freq, rq        |
| Filt | RLPF     | Resonant lowpass filter                                        | in, freq, rq        |
| Filt | RHPF     | Resonant highpass filter                                       | in, freq, rq        |

#+name: makegloss01
#+begin_src emacs-lisp :var tbl=gloss01 glosstype='nil :exports results :results value latex
(let ((str "")
      (gltype (if glosstype (format "type=%s," glosstype) "")))
  (pop tbl)
  (pop tbl)
  (while tbl
    (let ((item (pop tbl)))
      (setq str
	    (concat str
		    (format "\\newglossaryentry{%s}{%sname={%s},description={%s.}}\n"
			    (car item)
			    gltype
			    (pop item)
			    (car item))))))
  str)
#+end_src

#+name: ugengloss01
#+begin_src emacs-lisp :var tbl=ugens01 :exports results :results value latex
(let ((str ""))
  (pop tbl)
  (pop tbl)
  (while tbl
    (let ((item (car tbl)))
      (pop item)
      (setq str (concat str (format "\\newglossaryentry{%s}{type=ugen,name={%s},description={%s. Inputs: (%s)}}\n"
  		   (car item)
  		   (pop item)
  		   (pop item)
  		   (car item))))
      (setq tbl (cdr tbl))))
  str)
#+end_src
