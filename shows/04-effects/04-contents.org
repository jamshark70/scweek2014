#+startup: beamer

* Test								   :noexport:
** Test
*** Test

* Effects and mixing
** Mechanics: Applying effects
*** Things							   :noexport:
    - Within a NodeProxy
    - Between NodeProxies
    - Sends, MixerChannels

*** Effects bring the sound to life
#+name: makegloss
#+call: makegloss :exports (if hjh-exporting-slides "results" "none") :results value latex
#+results: makegloss

#+name: classgloss
#+call: makegloss(tbl=class,glosstype="class") :exports (if hjh-exporting-slides "results" "none") :results value latex
#+results: classgloss

#+name: mthgloss
#+call: makegloss(tbl=mth,glosstype="mth") :exports (if hjh-exporting-slides "results" "none") :results value latex
#+results: mthgloss

#+name: ugengloss
#+call: ugengloss :exports (if hjh-exporting-slides "results" "none") :results value latex
#+results: ugengloss

**** Effects are everywhere.
     - In pop or electronic music, you almost never hear any unprocessed sound.
     - Dry recordings are boring.
     - EQ, reverb, chorus etc. make the sound seem more alive.
**** First issue: How to connect effects.
     We'll look at three ways:
     - Between \clsspl{NodeProxy} in a \clss{ProxySpace}.\\
       We've seen this: filters in subtractive synthesis.
     - Source and effect within one \clss{NodeProxy}.\\
       This is like /insert/ effects in a DAW.
     - \clss{ProxySubmix} for routing and mixing.\\
       Brings mixing controls together in one place.

*** Multiple sources and effects
**** With several sources and effects, three main structures:
#+begin_center
#+begin_latex
\begin{tabular}{|c|c|c|}
\textbf{Serial} & \textbf{Parallel} & \textbf{Shared}\\
\hline
\includegraphics[width=.3\linewidth]{../04-effects/img/serial-effects.pdf}
&
\includegraphics[width=.3\linewidth]{../04-effects/img/parallel-effects.pdf}
&
\includegraphics[width=.3\linewidth]{../04-effects/img/shared-effects.pdf}
\\
\hline
\emph{Insert} effects & \multicolumn{2}{|c|}{\emph{Send} effects}
\end{tabular}
#+end_latex
#+end_center

*** Effects: Output /and/ input
**** Effects need audio input and output.
     - Oscillators may have only audio output.\\
       (Control inputs like \ci{freq} are not the same.)
     - Effects have to bring an audio signal in.\\
       Then they process it, and send out a modified signal.
**** \egls{JITLib} gives you two ways to bring audio in.
     - Calling \mth{ar} on a \clss{NodeProxy}.\\
       We've already done this---just a new use for effects.
     - New: The \ci{\textbackslash filter} adverb.\\
       Used for inserts and the \clss{ProxySubmix} approach.

*** Effect routing by NodeProxy access
**** Remember subtractive synthesis: Oscillator $\to$ filter.
     In modular style, that was:
#+begin_src {SuperCollider} -i
~oscil = { Saw.ar(...) };
~filter = { RLPF.ar(~oscil.ar, ...) };
#+end_src
**** We /can/ use the same for other effects.
     But, it has some limitations:
     - Good for /serial/ and /parallel/ effect processing.
     - Bad for /shared/ effects.

*** Problem: Adding an effect to an existing sound
**** For insert effects, /last/ effect $\to$ output.
     "Serial" processing, above.
**** Usual workflow: Start with the source.
     - At first, \mth{play} the source proxy.
     - Then add an effect. Now the effect should \mth{play}.
     - So you need to switch the proxy that's playing.
**** Solution: The \ci{<--} operator.
     - \cd{\textasciitilde target <-- \textasciitilde source;}
     - "Moves" the source into the target:
       - The target gets the source's contents.
       - Then, it plays the target and stops the source.
     - Sound should not change much.

*** Example: Saw into chorus
**** \ci{<--} says that we want \ci{\textasciitilde chorus} to play now.
     - \ci{\textasciitilde saw} keeps going /and/ it's copied into \ci{\textasciitilde chorus}.
     - Then we can replace \ci{\textasciitilde chorus} with an effect.
       (Run all the \ci{\textasciitilde chorus} lines together, and
       the glitch disappears.)\glsadd{chorus}
#+name: routing1
#+caption: Transferring a source to a second proxy, so that the second proxy can become an effect.
#+begin_src {SuperCollider} -i
p = ProxySpace.new.push;

~saw = { Saw.ar(440, 0.1).dup };
~saw.play;

~chorus <-- ~saw;

~chorus = {
   var in = ~saw.ar;
   in + DelayL.ar(in, 0.05, 0.02 + SinOsc.kr([-0.1, 0.11], 0, 0.014));
};

p.clear;
#+end_src

*** One proxy, many objects for effects in series
**** Effects belonging to one proxy can live in that proxy.
     - Proxies have several /slots/, accessed like an array.\glsadd{chorus}
     - So far, we have used slot 0 only.
     - Slots 1, 2 etc. can be effects with the \ci{\textbackslash filter} adverb.
#+name: routing2
#+caption: Putting an effect into the same proxy with its source.
#+begin_src {SuperCollider} -i
p = ProxySpace.new.push;  // if needed

~saw = { Saw.ar(440, 0.1).dup };
~saw.play;

~saw[1] = \filter -> { |in|
   in + DelayL.ar(in, 0.05, 0.02 + SinOsc.kr([-0.1, 0.11], 0, 0.014));
};

p.clear;
#+end_src

*** "Filter" input signal by argument
**** The last example has no \cd{\textasciitilde saw.ar}.
     - But it still gets the input signal... from \cd{\textbar in\textbar}.
     - \ci{\textbackslash filter} reserves the first argument for the input signal.
     - Any other arguments behave as we have seen:\\
       They become control inputs, and they appear in the GUI.
**** Exercise for you:
     - Modify Listing [[routing2]] to add a \ci{depth} argument to \ci{\textasciitilde saw[1]}.
     - \ci{depth} will take the place of \ci{0.014}.
     - Very important to add a spec!\\
       The depth must not be higher than 0.02.

*** Easy way to handle chains of effects
**** For example, drum processing.
     - EQ to remove garbage from the sound.
     - Compression.
     - More EQ to blend the sound into the mix.
**** This is easy with proxy slots.
#+begin_src {SuperCollider} -i
~kick = { ... buffer player ... };
~kick[1] = \filter -> { |in|
   ... destructive EQ...
};
~kick[2] = \filter -> { |in|
   ... compressor...
};
~kick[3] = \filter -> { |in|
   ... constructive EQ...
};
#+end_src

*** Insert effects: Wet/dry balance
**** VST-style effects usually have a /Mix/ setting.
     This is the balance between the dry and wet signals.
     - Dry :: The original, unprocessed input signal.
     - Wet :: The result of effect processing.
**** \ci{\textbackslash filter}s automatically create a \ci{wet} control for you.
     - The control will show up in the GUI.
     - Better way to imitate a traditional chorus effect:
       - The effect proxy returns only the \ugen{DelayL} (no \cd{in +}).
       - Set \ci{wet1} to 0.5, to blend with the original.

*** Chorus, using built-in "wet" control
\glsadd{chorus}
#+name: routing3
#+caption: Using the wet/dry control to implement chorusing in the standard, DAW way.
#+begin_src {SuperCollider} -i
~saw.addSpec(\wet1, [0, 1]);
~saw.set(\wet1, 0.5);
~saw[1] = \filter -> { |in|
   DelayL.ar(in, 0.05, 0.02 + SinOsc.kr([-0.1, 0.11], 0, 0.014));
};

p.clear;
#+end_src

*** Summary: Insert effects
**** Easiest way: \ci{\textbackslash filter} adverb.
     - Input signal comes to the first function argument.\\
       Call it \ci{in}---easy to remember.
     - The function should return only the processed signal.
     - Assign to a later slot in the \clss{NodeProxy}:\\
       @@latex:\cd{\textasciitilde proxy[1] = \textbackslash filter -> \{ \textbar in\textbar ... \}}.@@
     - Use the @@latex:\ci{wet\#}@@ control for balance.\\
       @@latex:\#@@ is the slot number, e.g. \ci{wet1}.

** Shared effects
*** Many signals $\to$ one effect
**** Some effects work well with several signals going in.
     Especially \egls{reverb}.
     - In real life, you have many sound sources in one room.
     - They are all subject to (roughly) the same reverb characteristics.
     - In an electronic mix, you can do the same:
       - Mix several sounds together.
       - Feed the mix into one reverb.

*** DAWs: Sends
**** {1.0\textwidth}{3in}				      :B_overlayarea:
     :PROPERTIES:
     :BEAMER_env: overlayarea
     :END:
***** DAWs handle this with \eglspl{send}.
***** O1-main							  :B_onlyenv:
      :PROPERTIES:
      :BEAMER_env: onlyenv
      :BEAMER_act: 1
      :END:
****** Left							      :BMCOL:
       :PROPERTIES:
       :BEAMER_col: 0.6
       :END:
	Normal signal flow:
	- Source...
	- ... into volume fader...
	- ... into hardware output.
****** Right							      :BMCOL:
       :PROPERTIES:
       :BEAMER_col: 0.4
       :END:
#+begin_center
#+attr_latex: :height 1.2in
[[../04-effects/img/01-send-schematic-main.pdf]]
#+end_center

***** O2-send							  :B_onlyenv:
      :PROPERTIES:
      :BEAMER_env: onlyenv
      :BEAMER_act: 2
      :END:
****** Left							      :BMCOL:
       :PROPERTIES:
       :BEAMER_col: 0.6
       :END:
	A \egls{send} splits the signal in another direction.
	- The send has its own volume control.
	- This is a /pre-fader/ send:\\
	  The send comes directly from the source, /before/ the volume control.
****** Right							      :BMCOL:
       :PROPERTIES:
       :BEAMER_col: 0.4
       :END:
#+begin_center
#+attr_latex: :height 1.2in
[[../04-effects/img/02-send-schematic-send.pdf]]
#+end_center

***** O3-reverb							  :B_onlyenv:
      :PROPERTIES:
      :BEAMER_env: onlyenv
      :BEAMER_act: 3
      :END:
****** Left							      :BMCOL:
       :PROPERTIES:
       :BEAMER_col: 0.6
       :END:
	The copy goes through some effect processing.\\
	The effect mixes into the main output.
****** Right							      :BMCOL:
       :PROPERTIES:
       :BEAMER_col: 0.4
       :END:
#+begin_center
#+attr_latex: :height 1.2in
[[../04-effects/img/send-schematic-all.pdf]]
#+end_center

***** O4-post-fader						  :B_onlyenv:
      :PROPERTIES:
      :BEAMER_env: onlyenv
      :BEAMER_act: 4
      :END:
****** Left							      :BMCOL:
       :PROPERTIES:
       :BEAMER_col: 0.6
       :END:
       A /post-fader/ send takes the signal from the volume control.
       - This is more realistic for reverb:\\
	 As the source gets quieter, the reverb should get quieter too.
****** Right							      :BMCOL:
       :PROPERTIES:
       :BEAMER_col: 0.4
       :END:
#+begin_center
#+attr_latex: :height 1.2in
[[../04-effects/img/send-schematic-all-postfader.pdf]]
#+end_center

*** JITLib: ProxySubmix
**** In JITLib, we can do the same thing using \clss{ProxySubmix}.
     - \Glspl{send} /mix/ a selected group of signals together.\\
       In effect, this is a /submix/.
     - \clss{ProxySubmix} represents a group of \glspl{send}.
     - The effect needs only one source, then.
     - Like other proxies, you can make the \clss{ProxySubmix} early.

*** Simple reverb with a ProxySubmix
**** To use:
     1. Create the \clss{ProxySubmix}.
     2. Initialize it to the number of channels you need.\\
	For reverb, normally stereo: two channels.
     3. Use the submix in the reverb effect.\\
	Note: In this case, the effect's /Mix/ should be 1.0.
#+name: sharedfx1
#+caption: A ProxySubmix, feeding audio into a simple reverb effect.
#+begin_src {SuperCollider} -i
p.clear;  // p = ProxySpace.new.push;
a = ();   // storage, outside ProxySpace

a.m = ProxySubmix(\revin);  // ProxySubmix needs a name
a.m.ar(2);  // initialize to stereo

~rev = {
   var in = a.m.ar;
   FreeVerb2.ar(in[0], in[1], 1, 0.8, 0.2);
};
~rev.play;
#+end_src

*** Sound source
**** The sound source is a regular \clss{NodeProxy}.
     - Reverb is easier to hear with short, percussive sounds:\\
       \cd{Env.perc}.
     - \mth{addMix}: Create a send for the source.\\
       0.7 is the initial level for the send's volume control.
#+name: sharedfx2
#+caption: A percussive audio source, added into the reverb ProxySubmix.
#+begin_src {SuperCollider} -i
~src = { |amp = 8|
   var sig = PinkNoise.ar(amp),
   trig = Dust.kr(2.5) > 0,
   freq = TExpRand.kr(200, 1200, trig),
   env = EnvGen.kr(Env.perc(0.01, 0.3), trig);
   BPF.ar(sig, freq, 0.1, env).dup
};
~src.play;  // listen to the dry signal first

a.m.addMix(~src, 0.7);
#+end_src

*** Graphical mix control
**** The sends' volume controls are important.
     - Some sounds want a lot of reverb.\\
       Others sounds terrible with the same reverb level.
     - The volume controls (0.7 in Listing [[sharedfx2]]) allow each
       source to have its own level of reverb.
     - In code, set the volume level: \cd{a.m.set(\textbackslash snd\textunderscore src, level)}.\\
       This is how you can change reverb level by mobile.
**** \clss{ProxySubmix} collects all the send volumes in one place.
     - Call \ci{gui} on the submix object.
     - You get a window with several \ci{snd\textunderscore} controls.\\
       Plus one more: \ci{lev\textunderscore ALL}, which amplifies the whole submix.
     - Dry mix levels are in the \clss{ProxySpace}'s GUI.
     - Easy access to all the mixing controls!

*** Exercise for you
    1. Write another source proxy.
       - Percussive envelope, as above.
       - Use a pitched oscillator.
    2. Plug it into the submix (\ci{a.m}).
    3. Adjust its level by GUI.

*** Summary: Shared effects
**** For shared objects, /mix/ the sources into the effect.
     \clss{ProxySubmix} does this.
     1. Create it, with a name: \cd{ProxySubmix(\textbackslash name)}.
     2. Initialize its number of channels: \cd{a.m.ar(2)}.
     3. \mth{addMix} to feed sources into it.
	- Sends are /post-fader/ by default.
	- For /pre-fader/: \cd{a.m.addMix(\textasciitilde proxy, level, false)}.
     4. \cd{a.m.gui} to bring up a separate mixer for the effect.

** Common effects: Chorus
*** Building common effects
**** This section walks through the construction of a few common effects.
     - Chorus
     - Distortion
     - EQ
     - Reverb
#     - Compression (dynamics processing)

*** Chorus
**** \eGls{chorus} imitates the sound of several players together.
     Human players are:
     - Not exactly in time.\\
       We can come within a few milliseconds, but no closer.
     - Not exactly in tune. (Close---within a few Hz.)
     The imperfections make the sound more interesting.
**** Chorus uses a short delay to get both effects.
     - The delay is inherently a time offset.
     - Changing the delay time affects pitch, by the Doppler effect.

*** Delays and Doppler
#+begin_center
#+attr_latex: :height 1.2in
[[../04-effects/img/doppler-shorten.pdf]]
#+end_center
**** Doppler shift from changing delay time?
     - Here, we start with a 1.2 second delay.
     - After 1 sec, the delay is 1 sec.\\
       That is: At time 2.0, we hear audio from 1.0 sec.
     - The delay puts out 1.0 sec of audio /in 0.8 sec/!\\
       The pitch /must/ change.

*** Synth example based on the chart
#+name: chorus1
#+caption: A brief demonstration of Doppler shift, resulting from the delay time becoming shorter.
#+begin_src {SuperCollider} -i :var extract='t
a = {
   var sig = SinOsc.ar(440, 0, 0.1),
   delaytime = Line.kr(1.2, 0.2, 2),
   delay = DelayL.ar(sig, 1.2, delaytime),
   eg1 = EnvGen.kr(Env.linen(0.01, 0.98, 0.01)),
   eg = EnvGen.kr(Env.linen(0.01, 1.98, 0.01), doneAction: 2);
   (((sig * eg1) + delay) * eg).dup
}.play;
#+end_src

*** Simple chorus in SC
**** Let's take apart the earlier chorus example.
     See Listing [[routing3]].
#+begin_src {SuperCollider}
DelayL.ar(in, 0.05, 0.02 + SinOsc.kr([-0.1, 0.11], 0, 0.014));
#+end_src
     - \ugen{DelayL}: The delay line.
     - Delay time: \cd{0.02 + SinOsc...}.
       - 0.02 is 20 ms /pre-delay/.
       - \ugen{SinOsc} makes the delay go up and down, slowly.
       - \cd{[-0.1, 0.11]}: Two frequencies, producing two sines and two delays.\\
	 Detuning twice makes a richer sound.\\
	 --0.1 makes one go down while the other goes up.
       - \cd{0.014}: The effect's /width/. It *must* be < predelay.\\
	 What bad thing will happen if width > predelay?

*** Chorus depends on the mix
**** The delay line only changes the sound's tuning.
     - It doesn't make the rich ensemble sound by itself.
     - For that, mix the original sound into the delay.
     - The easiest way, as above, is using the \ci{\textbackslash filter}'s \ci{wet} control.
     - Normally this is 0.5 for chorus.

*** Making a general chorus effect
**** As in synthesis...
     Start with a prototype, then add controls.\\
     What controls can we add here?\pause
     - Predelay :: The "center" delay time.\\ The actual delay time varies above and below.
     - Width :: How far above and below the center.
     - Frequency :: How fast to change the delay time.
     Notes:
     - The pitch changes more with a larger width and frequency.
     - Usually both are fairly small.
**** Exercise: Add parameters to the chorus that we've already seen.
     Make sure to \mth{addSpec}, so that they don't go out of range in the GUI.

*** Refinements to chorus
**** More delays = richer effect.
     - Slight differences also get a better sound.
     - Try adding a small random offset to:
       - Pre-delay
       - Frequency
       - Phase
**** For more ideas for chorus, see:
     /Sound On Sound/ "Synth Secrets" no. 62 (June 04).\\<all>
     http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm

** Common effects: Distortion
*** Distortion
**** Distortion flattens the peaks of an input sound.
**** Left							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.6
     :END:
     - The top is a pure sine wave.
     - The bottom is the same wave, distorted by \mth{tanh}.
**** Right							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.4
     :END:
     #+begin_center
     #+attr_latex: :height 1.25in
     [[../04-effects/img/sine-distorted.png]]
     #+end_center

*** Distortion's effect on spectrum
**** Distortion /adds harmonics/ to the sound's spectrum.
**** Left							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.6
     :END:
     - *Top:* Spectrum of a sine wave at 440 Hz.\\
       As expected, energy is concentrated in one place.
     - *Bottom:* Spectrum of a distorted sine wave.\\
       440 Hz is still strong, and we also get energy at multiples of 440 Hz.
**** Right							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.4
     :END:
     #+begin_center
     #+attr_latex: :height 1.25in
     [[../04-effects/img/sine-dist-spectrum.png]]
     #+end_center

*** Distortion and waveshaping
**** \eGls{waveshaping} uses a table to transform the input.
     The table represents a \egls{transfer function}, which maps the input onto the output.
**** Left							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.6
     :END:
     - *Top:* A linear transfer function.\\
       $x = y$: /No change/ in sound.
     - *Middle:* Mild distortion.
       - Near the middle, it's basically a straight line.\\
	 Quiet input, not much change in sound.
       - The edges are flatter.\\
	 Loud input, more extreme effect.
     - *Bottom:* More extreme distortion.\\
       - Quiet input gets louder very quickly.
       - Loud input gets "crushed" more.
**** Right							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.4
     :END:
     #+begin_center
     #+attr_latex: :height 2.2in
     [[../04-effects/img/distortion-xfer-funcs.png]]
     #+end_center

*** Easy distortion
**** Usual structure of a distortion effect:
     1. *Pre-amplifier:* Controls the effect's intensity.
	- Distortion is heavier when the input is louder.
     2. *Distortion operator:* Four predefined types.
	- \mth{distort} :: Moderate distortion.\\
	  Formula: $\frac{x}{\lvert x\rvert+1}$.
	- \mth{softclip} :: Mild distortion.\\
	  Below --6 dB, no distortion at all.
	- \mth{tanh} :: Harsher distortion.\\
	  The /hyperbolic tangent/ of the input.
     3. *Post-amplifier:* Reduce the volume to fit into the mix.

*** Easy distortion example
    *Note:* The example puts the effect into slot \cd{[1]}. Distortion is usually an insert effect, so this is the right way..
#+name: dist1
#+caption: A very simple distortion effect, with preamp and postamp parameters.
#+begin_src {SuperCollider} -i
p.clear;  // p = ProxySpace.new.push;

~kick.ar(2);  // initialize stereo
~kick[1] = \filter -> { |in, preamp = 0.5, postamp = 0.1|
   (in * preamp).tanh * postamp
};
~kick.addSpec(\preamp, [0.25, 20, \exp]);
~kick.addSpec(\postamp, \amp);
#+end_src

*** Distortion and crunchy dance kick drums
**** A common kick drum in dance music is a sinewave.
     - Frequency slides quickly from high to low: an \egls{envelope}.\\
       Note that you have to write the starting frequency twice.
     - Distortion makes it dirtier.
     - For simplicity, we'll generate the trigger by \ugen{Impulse}.
     - For composition, you would want a \ci{t\textunderscore trig} control, and drive it by a pattern.
#+name: dist2
#+caption: A simple synthetic kick drum, to feed into the distortion above.
#+begin_src {SuperCollider} -i
~kick[0] = {
   var trig = Impulse.ar(2),
   freq = EnvGen.ar(Env([400, 400, 50], [0, 0.07], \exp), trig),
   ampeg = EnvGen.ar(Env.perc(0.01, 0.4), trig),
   sig = SinOsc.ar(freq);
   (sig * ampeg).dup
};
#+end_src

*** Note: Freq EnvGen					    :B_ignoreheading:
    :PROPERTIES:
    :BEAMER_env: ignoreheading
    :END:
Let's look at it more closely at that frequency envelope. *This is
important!* It's a very common question on the SuperCollider users
mailing list: How do you make a line that you can retrigger any time?
You will certainly forget this point sometime. In fact, while writing
the example, /I/ forgot it---and I have over ten years experience in
SC!

#+begin_src {SuperCollider}
EnvGen.ar(Env([400, 400, 50], [0, 0.07], \exp), trig)
#+end_src

Why does the higher end (400) appear twice? It's because of the
behavior of retriggering an envelope. You might think a trigger means
to "go back to the beginning," but that's not exactly right. It tells
\ugen{EnvGen} to go to /segment 0/.

\ugen{EnvGen} knows:

- its current value;
- the target value of the segment it's currently playing;
- how long it should take to reach the target value.

So, the trigger actually means: "Starting right now, slide to
\ci{value}$_0$, and take \ci{time}$_0$ to do it." What's confusing is
that the first 400 is /not/ \ci{value}$_0$---the /second/ one is.

#+begin_center
#+attr_latex: :align |c|c|c|
| *Env part* | *Value* | *Time* |
|------------+---------+--------|
| Initial    |     400 |        |
|------------+---------+--------|
| Segment 0  |     400 |      0 |
| Segment 1  |      50 |   0.07 |
#+end_center

If you write the envelope as @@latex:\cd{Env([400, 50], [0.07],
\textbackslash exp)}@@, then the first envelope segment goes
/to/ 50. An incoming trigger will cause \ugen{EnvGen} to transition
/from/ 50 (its current level) /to/ 50, producing... no change in the
sound.

To retrigger a line, you have to have an envelope whose first segment
goes to the start of the line very quickly, and to do that, you have
to provide the starting value twice: once as the envelope's initial
value, and once as the target of the first segment.

*** Shaper UGen
**** \ugen{Shaper} lets you use an arbitrary transfer function.
     At right, a sinewave being waveshaped by another sinewave.
**** Left							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.6
     :END:
      1. Create a \clss{Signal} with the transfer function values.\\
       	 The array size must be a power of two: 256, 512, 1024 etc.
      2. Convert the Signal into a \clss{Wavetable}: \mth{asWavetable}.
      3. Load the wavetable into a buffer: \mth{sendCollection}.
      4. Now you can use it as the buffer input to \ugen{Shaper}.
**** Right							      :BMCOL:
     :PROPERTIES:
     :BEAMER_col: 0.4
     :END:
     #+begin_center
     #+attr_latex: :height 1.25in
     [[../04-effects/img/sine-shaped-by-sine.png]]
     #+end_center

*** Notes on Shaper example
**** Note the techniques to fill the buffer.
     - The transfer function is a sinewave, so we can use \mth{sineFill}.\\
       See also \clss{Buffer}'s \mth{sine1}, \mth{sine2} and \mth{sine3} methods.
     - You can also convert any array by \cd{array.as(Signal).asWavetable}.
     - The last couple of statements change the transfer function.\\
       You can do this while playing---experiment to get the right sound.
**** *IMPORTANT:* \ugen{Shaper} input must not go outside --1 .. 1!
     - The example uses \ugen{Limiter} to control this.

*** Shaper example
#+name: dist3
#+caption: Replace the tanh distortion with Shaper distortion.
#+begin_src {SuperCollider} -i
x = Signal.sineFill(512, [1]);  // x.plot to see
b = Buffer.sendCollection(s, x.asWavetable, 1,
   action: { "done".postln });

~kick[1] = \filter -> { |in, postamp = 0.1|
   in = Limiter.ar(in, 1);
   Shaper.ar(b, in, postamp);
};

// change the transfer function
b.sendCollection(
   Signal.sineFill(512, [1, 0.5, 0.33]).asWavetable
);

// "sine1" on a Buffer is a shortcut
b.sine1([0, 0, 0, 0, 0, 0, 0, 1]);
#+end_src

** Common effects: EQ
*** EQ
**** EQ should be an insert effect.
     - Use proxy slots: \cd{[1]} etc.
**** The *BEQSuite* provides EQ filters.
     - \ugen{BPeakEQ} :: Standard boost/cut EQ.
     - \ugen{BLowShelf} :: Low shelving.
     - \ugen{BHiShelf} :: High shelving.
     Also \ugen{BLowPass} and \ugen{BHiPass}.

*** Mass-producing EQs and controls
**** You'll probably create a lot of EQs.
     - I've included a function in (example file).
     - Add it into your personal storage dictionary.
     - Then you can add EQs easily.\\
       (Here, assuming \ci{a} is your dictionary.)
#+name: eqfunc
#+caption: Adding EQ bands to a proxy, by a convenience function.
#+begin_src {SuperCollider} -i
~saw = { Saw.ar(50, 0.1).dup };
~saw.play;
~saw.gui;

a.addEQ(~saw, 1);

// Add a low pass filter,
// and override the default frequency and rq
a.addEQ(~saw, 2, BLowPass, 800, 0.05);
#+end_src
**** TODO Put the function somewhere sensible			   :noexport:
#+begin_src :exports none
a = ();
a.addEQ = { |dict, proxy, slot, eqClass(BPeakEQ), freq = 440, rq = 1, gain|
	var freqname, rqname, gainname, gainSpec;
	if(slot.isNil) { slot = proxy.objects.indices.maxItem + 1 };
	if([BPeakEQ, BLowShelf, BHiShelf].includes(eqClass)) {
		gainSpec = [-20, 20];
		if(gain.isNil) { gain = 0 };
	} {
		gainSpec = \amp;
		if(gain.isNil) { gain = 1 };
	};
	freqname = ("eqFreq" ++ slot).asSymbol;
	rqname = ("eqRq" ++ slot).asSymbol;
	gainname = ("eqGain" ++ slot).asSymbol;
	proxy.addSpec(freqname, \freq)
	.addSpec(rqname, [1, 0.01, -2])
	.addSpec(gainname, gainSpec);
	proxy.set(freqname, freq, rqname, rq, gainname, gain);
	proxy[slot] = \filter -> { |in|
		var freq = NamedControl.kr(freqname, freq),
		rq = NamedControl.kr(rqname, rq),
		db = NamedControl.kr(gainname, gain);
		eqClass.ar(in, freq, rq, db);
	};
};
#+end_src

** Common effects: Reverb
*** Reverb
**** For this workshop, keep it simple: Just use \ugen{FreeVerb2}.
     - This is a stereo-in, stereo-out reverb.\\
       Nothing fancy, not a special sound.
     - Use a \clss{ProxySubmix}. Create it first.
     - Put the reverb in a dedicated effect proxy.\\
       Read the signal from the submix.
#+name: reverbAgain
#+caption: Setting up simple reverb.
#+begin_src {SuperCollider} -i
a = ();   // storage, outside ProxySpace

a.m = ProxySubmix(\revin);  // ProxySubmix needs a name

~rev.addSpec(\room, [0, 1]);
~rev.addSpec(\damp, [0, 1]);
~rev = { |room = 0.5, damp = 0.5|
   var in = a.m.ar(2);
   FreeVerb2.ar(in[0], in[1], 1, room, damp);
};
~rev.play;
#+end_src

*** Other ways to do reverb
     - \ugen{GVerb}: Mono-in, stereo-out, but with a lot more parameters.
     - Roll your own reverb: Beyond this workshop's scope.
       - Read some articles on how to make reverb.
       - SC has all the parts, waiting to be put together.
     - Convolution reverb with \ugen{PartConv}.
       - Load the (mono) impulse response in a buffer, in a special way.
       - See \ci{PartConv}'s help file for details.
